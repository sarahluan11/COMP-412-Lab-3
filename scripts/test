#!/usr/bin/python3

# COMP 412 Lab 3 Test Script
#
# This script is intended to help you test your Lab 3 scheduler.
# In invokes the scheduler on every ILOC file in a directory.
# For each .i file, it schedules the block, runs the scheduled 
# code through the simulator (with the -s 1 flag), and checks 
# that the scheduled code produces the correct results.
#
#

import os, pwd, time, calendar, sys, datetime
import operator
from datetime import datetime, date

## routine to compare two ILOC simulator output files
def check_output(sched_output, correct_output):
    global logfile

    fa = open(sched_output, 'r')
    fc = open(correct_output, 'r')
    line_a = ""
    line_c = ""

    is_bad = False
    while True:
        line_c = fc.readline()
        while len(line_c) == 1:
            line_c = fc.readline()

        line_c = line_c.strip("\r ")  # remove random junk & blanks

        line_a = fa.readline()
        while len(line_a) == 1:
            line_a = fa.readline()

        line_a = line_a.strip("\r ")  # remove random junk & blanks

        if 'cycle' in line_c:
            break
        if line_a == "":
            is_bad = True
            break

        if not line_a == line_c:
            is_bad = True
            break

    fa.close()
    fc.close()
    if is_bad == True:
        return -1, -1

    if not 'cycle' in line_a:
        return -1, -1

    original  = line_c.rsplit(' ', 1)[0].rsplit(' ', 1)[1]
    scheduled = line_a.rsplit(' ', 1)[0].rsplit(' ', 1)[1]

    return int(original), int(scheduled)

# file is the ILOC input file
# sim is the location of the iloc simulator
# submission is 
def lab3_run(execname, filename, dirname):
    global logfile
    global debug
    global need_newline

    sim = '/clear/courses/comp412/students/lab3/sim'

    #get input for simulator
    if debug != 0:
        print("lab3_run( ",execname,",\n\t",filename,",\n\t",dirname,",\n\t",sim," )\n")

    f = open(dirname+'/'+filename, 'r')
    input = ""
    output = []

    while True:
        line = f.readline().strip()
        if line == "":
            break
        if '//SIM INPUT:' in line:
            input = line.split(':')[1]
            break

    f.close()

    if debug != 0:
        print("\tInput is "+input)

    if '/' in filename:
        result_file = tempdir + '/sched_' +filename.rsplit('/', 1)[1]
    else:
        result_file = tempdir +'/sched_' + filename

    full_filename = dirname + "/" + filename

    if not '/' in execname:
        execname = './' + execname

    # get result without scheduling
    correct_output = tempdir+'/correct_output'
    os.system(sim + ' -s 3 ' + input + ' < ' + full_filename + ' > ' + correct_output)

    # test the scheduler against a single
    # 1. run the scheduler, saving code in result_file
    # 2. run the simulator on result file, with appropriate input
    # 3. call check_output on the scheduled output and the original file's output
    #

    number_wrong = 0
    sched_output = tempdir+'/output'

    os.system("("+execname + ' ' + full_filename + ' > ' + result_file+") >/dev/null")
    # use the -s 1 flag to test interlock-free execution
    os.system("("+sim+' -s 1 '+input+' < '+result_file+' > '+sched_output+") >/dev/null")
    # check the results
    original, scheduled = check_output(sched_output, correct_output)
    if scheduled < 0:
        print('\tIncorrect results')
        logfile.write("-->\t incorrect results\n\n")
        number_wrong = number_wrong + 1
    else:
        print("\t correct in "+str(scheduled)+" cycles")
        logfile.write("  correct  \t"+str(scheduled)+" cycles\t"+str(original)+" cycles\n")
    
    return number_wrong

def main():
    #run in the dir submissions/
    global tempdir
    global debug
    global logfile
    global need_newline

    debug = 0
    argc = len(sys.argv)

    if argc != 3:
        print("Syntax should be ./test <executable> <directory>")
        exit(0)

    executable = sys.argv[1]
    directory  = sys.argv[2]

    if (not os.path.exists(executable)):
        print("\nExecutable '"+executable+"' not found.\nTest halts.\n")
        exit(-1)

    if (not os.access(executable, os.X_OK)):
        print("\n'"+executable+"' is not executable.\nTest halts.\n")
        exit(-1)

    if (not os.path.exists(directory)):
        print("\nDirectory '"+directory+"' not found.\nTest halts.\n")
        exit(-1)    

    if (not os.path.isdir(directory)):
        print("\n'"+directory+"' is not a directory.\nTest halts.\n")
        exit(-1)

    if (not os.access(directory, os.R_OK | os.X_OK)):
        print("\n'"+directory+"' is not readable.\nTest halts\n")
        exit(-1)

    ILOCFiles = os.path.abspath(directory)

    print("Testing '"+executable+"'")
    print("ILOC files from '"+ILOCFiles+"'")

    # At this point, we have established that we have an executable
    # and we have a directory.
    # Now, all that we need to do is to test the executable on each
    # ILOC file in the directory

    username = pwd.getpwuid( os.getuid())[0]
    tempdir  = "/tmp/"+username
    if (os.path.exists(tempdir)):
        print("\nWARNING: Temporary directory "+tempdir+" already exists")
        print("May indicate that a prior run failed badly\n")
    else:
        os.system("mkdir "+tempdir)
        os.system("chmod 775 "+tempdir)
        if (not os.access(tempdir, os.R_OK | os.W_OK)):
            print("Could not create temporary directory\n")
            exit(-1)
        else:
            print("Writing temporary files in "+tempdir+"\n")

    print("Failures will be reported on stdout and in the log file\n")

    # Set up the log file
    root = os.getcwd()
    logname = root +"/" + username + ".log"

    logfile = open(logname,'w')
    logfile.write("Testing '"+executable+"' on files in "+ILOCFiles+"\n")

    today = date.today()
    time  = datetime.now()
    date_string = today.strftime("%m-%d-%y")
    time_string = time.strftime("%H:%M:%S")
    logfile.write('Run on '+date_string + ' at ' + time_string  + '\n')

    # Break executable into directory and command name, if necessary
    #
    # Because many executables are scripts that reference components
    # relative to the current directory, we need to move to the
    # directory that contains the executable.

    execdir = "."
    if '/' in executable:
        execdir, execbase = os.path.split(executable)
        os.chdir(execdir)
        logfile.write("\nExecuting in directory: '"+execdir+"'\n")
        logfile.write("On files from directory: '"+ILOCFiles+"'\n")
        logfile.write("\n\t\t  Result\tScheduled\tOriginal\n")
        executable = "./"+execbase

    logfile.write("\n")
    for filename in sorted(os.listdir(ILOCFiles)):
        splitname = filename.split('.')
        if (len(splitname) == 2 and splitname[1] == 'i'):
            print("Testing "+filename+': ',end="")
            logfile.write("For "+filename+":\t")
            lab3_run(executable,filename,ILOCFiles)
        else:
            if debug != 0:
                logfile.write("Skipping file '"+filename+"'\n")

    # clean up
    logfile.write("\nRemoving "+tempdir+"\n")
    os.system("rm -r "+tempdir)
    if (os.path.exists(tempdir)):
        logfile.write("--> removal failed\n")

    logfile.write("\nTest run exits successfully.")
    print("\nTest run ends\n")
    exit(0)


if __name__ == "__main__":
    main()
